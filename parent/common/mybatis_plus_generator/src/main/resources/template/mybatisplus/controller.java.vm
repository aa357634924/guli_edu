package ${package.Controller};

import com.rj.baseservice.exception.config.CustomException;
import com.rj.utils.ResponseResult;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import lombok.extern.slf4j.Slf4j;
import com.alibaba.druid.util.StringUtils;
import java.util.Arrays;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.*;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * $!{table.comment} 前端控制器
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
#if(${swagger2})
@Api("${table.controllerName} 前端控制器接口文档")
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
##@RequestMapping("#if(${table.controllerName})/${table.controllerName}#end#if(${controllerMappingHyphenStyle})#else${table.entityPath}#end")
@RequestMapping("/${table.entityPath}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} service;

    @ApiOperation(value="插入或修改", notes="插入或修改", produces="application/json")
    @RequestMapping(value = "/save",method = RequestMethod.POST)
    public ResponseResult saveOrUpdate(${entity} obj){
        boolean bool = service.saveOrUpdate(obj);
        if(bool){
            return ResponseResult.ok().returnMessage("saveOrUpdate success...");
        }else{
            return ResponseResult.error().returnMessage("saveOrUpdate fail...");
        }
    }

    @ApiOperation(value="根据条件进行查询-分页（会查询出逻辑删除掉的数据）", notes="根据条件进行查询-分页（会查询出逻辑删除掉的数据）", produces="application/json")
    @RequestMapping(value = "/findPageByCondition",method = RequestMethod.POST)
    public ResponseResult findPageByCondition(${entity} obj){
        Page<${entity}> page = new Page<${entity}>();
        IPage<${entity}> iPage = service.selectPageByCondition(page, obj);
        log.info("findPageByCondition success...");
        return ResponseResult.ok().returnMessage("findPageByCondition success...").returnData("items",iPage);
    }

    @ApiOperation(value="根据条件进行查询-分页（不会查询出逻辑删除掉的数据）", notes="根据条件进行查询-分页（不会查询出逻辑删除掉的数据）", produces="application/json")
    @RequestMapping(value = "/findByCondition",method = RequestMethod.POST)
    public ResponseResult findByCondition(@RequestParam Long currentPage, @RequestParam Long limit,@RequestBody ${entity} obj){
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
        Page<${entity}> page = new Page<${entity}>(currentPage,limit);
        if(null != obj.getGmtCreate()){
            queryWrapper.eq("gmt_create",obj.getGmtCreate());
        }
        service.page(page, queryWrapper);
        log.info("findByCondition success...");
        return ResponseResult.ok().returnMessage("findByCondition success...").returnData("total",page.getTotal()).returnData("items",page.getRecords());
    }

    @ApiOperation(value="测试自定义异常类）", notes="测试自定义异常类", produces="application/json")
    @RequestMapping(value = "/testException",method = RequestMethod.POST)
    public ResponseResult testException(){
        try{
            int i = 10/0;
        }catch (Exception e){
            throw new CustomException(20001,"抛出自定义异常");
        }
        return ResponseResult.ok().returnMessage("findByCondition success...");
    }

    @ApiOperation(value="根据ID删除数据", notes="根据ID删除数据", produces="application/json")
    @RequestMapping(value = "/deleteById",method = RequestMethod.POST)
    public ResponseResult deleteById(String id){
        if(StringUtils.isEmpty(id)){
            return ResponseResult.error().returnMessage("id为空，删除失败...");
        }
        boolean bool = service.removeById(id);
        if(bool){
            return ResponseResult.ok().returnMessage("被删除的ID号为："+id+"，删除成功...");
        }else{
            return ResponseResult.error().returnMessage("被删除的ID号为："+id+"，删除失败...");
        }
    }

    @ApiOperation(value="根据ID拼接的字符串批量删除数据", notes="根据ID拼接的字符串批量删除数据", produces="application/json")
    @RequestMapping(value = "/deleteByIds",method = RequestMethod.POST)
    public ResponseResult deleteByIds(String ids){
        if(StringUtils.isEmpty(ids)){
            return ResponseResult.error().returnMessage("ids为空，批量删除失败...");
        }
        String[] idArr = ids.split(",");
        boolean bool = service.removeByIds(Arrays.asList(idArr));
        if(bool){
            return ResponseResult.ok().returnMessage("被删除的ID号为："+ids+"，批量删除成功...");
        }else{
            return ResponseResult.error().returnMessage("被删除的ID号为："+ids+"，批量删除失败...");
        }
    }
}

#end